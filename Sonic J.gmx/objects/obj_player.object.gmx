<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_arrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--- Setup variables ---

//--- Variables ---//
xpos= x;
ypos= y;
for (var i = array_length_1d(global.checkpoint_activated) - 1; i &gt; -1; i--;){
    if global.checkpoint_activated[i]{
        xpos = global.spawn_x;
        ypos = global.spawn_y;
        break;
    }
}
drop = false;
drpcharge = 0;
drpspd = 8; //the base speed for a drop dash
drpmax = 12; //the top speed for a drop dash
prevx[0] = xpos; //Previous x will be set to the x value only for the first step.
prevy[0] = ypos; //Previous y will be set to the y value only for the first step.
draw_x = xpos;
draw_y = ypos;
prevdx[0] = xpos;
prevdy[0] = ypos;
xsp= 0;
xsp= 0;
ysp= 0;
gsp= 0;
slope= 0;
angle= 0;
draw_angle= angle; //draw_angle will be the angle shown when drawing the character
tile_x = 0;
tile_y = 0;
action= 0;
ground= 0;
mode = 0;
dir= 1; //Direction
spin= 0; //Will be used to determine if the character spins or not
control_lock = 0; //Will be used to determinate if the input will be locked or not.
p_layer = 0;
global.player_rings = 0;
sd_subimg = 0;
debug = debug_mode;
hurt = 0;
hurttimer = 0;
flash_timer = -1;
landed = false;
tunnel = false;
if global.hit != 999+room global.hit = 0;
spike = 0;
shield = false;
sh_spr_ind= noone;
sh_img_ind= 0;
sh_action = false;
sh_dir = 1;
sh_ov_img_ind= 0;
sh_ov_spr_ind= noone;
sh_bubble_bounce = false;
invincible_timer = 0;
super_speed_timer = 0;
hyper_ring=false;

//--- Sensor Constants ---//
center_x = xpos;
if !spin center_y = ypos+16-19; else center_y = ypos+16-15;
sensor_hspace = 9;
sensor_a_y = 0;
sensor_b_y = 0;
sensor_c_y = 0;
sensor_d_y = 0;
sensor_e_y = 0;
sensor_f_y = 0;
sensor_a_x = 0;
sensor_b_x = 0;
sensor_c_x = 0;
sensor_d_x = 0;
sensor_e_x = 0;
sensor_f_x = 0;
x1 = 0;
x2 = 0;
y1 = 0;
y2 = 0;
xa = 0;
xb = 0;
ya = 0;
yb = 0;

//--- Grounded speed constants ---//
acc= 0.046875;
dec= 0.5;
frc= 0.046875;
top= 6;
slp= 0.125;
slprollup= 0.078125;
slprolldown= 0.3125;
rollfrc= 0.0234375;
rolldcc= 0.125;
fall= 2.5;
spindrev = 0;

//--- Input Constants ---//
key_l = 0
key_r = 0
key_u = 0
key_d = 0
key_a = 0
key_ar = 0
key_ah = 0

//--- Jumping Constants ---//
air= 0.09375;
jmp= 6.5;
knxjmp= 6;
grv= 0.21875;

//--- Misc. Constants ---//
platform_check  = 0;
plat_col = 0;
allow_input = true;
skidding = 0;
skidding_sound = 0;
skidding_effect_timer = 0;
skidding_effect_flag = false;
total_inputs = 0;
time = 0;
demo_error = false;
fade = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--- Sprite Constants ---
character = undefined; //Character indexing is used as strings.

//We'll use a switch statement to set the sprites according to the current character index.
//To add your own, add a new case, change the chracter value to your character name as a STRING, then change the sprite values to your own.
switch (character){
    default:
    case "sonic":
        character = "sonic"; //in case the variable turns out to be unknown, it will default back to sonic.
        stand_sprite = spr_sonic_stand;
        idle_sprite = spr_sonic_stand;
        walk_sprite = spr_sonic_walk;
        run_sprite = spr_sonic_run;
        run2_sprite = spr_sonic_run_2;
        spin_sprite = spr_sonic_spin_new;
        spindash_sprite = spr_sonic_spindash;
        crouch_sprite = spr_sonic_crouch;
        lookup_sprite = spr_sonic_lookup;
        up_sprite = spr_sonic_spring_up;
        pushing_sprite = spr_sonic_pushing;
        rotate_sprite = spr_sonic_rotate;
        skidding_sprite = spr_sonic_skidding;
        hurt_sprite = spr_sonic_hurt;
        die_sprite = spr_sonic_die;
        break;
}

//--- Animation Variables ---//
ani_index = undefined; //Sprite Index
ani_to_be_set = stand_sprite; //Animation to be set
ani_subimg_duration_timer = 0; //Frame duration timer
ani_subimg_num = 0; //Number of subimages the current sprite has
ani_subimg_duration_set = 0; //Frame Duration
ani_subimg = 0; //Sprite subimage index (starting from 0)
ani_subimg_loop = 0; //Loop subimage index.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--- Load Demo Files ---
if global.Demo
{
    iii = 0;
    i_l[0] = false;
    i_r[0] = false;
    i_u[0] = false;
    i_d[0] = false;
    i_a[0] = false;
    i_t[0] = 0;
    if file_exists(working_directory + "DEMO1"){
        ini_open(working_directory + "DEMO1");
        i = 0;
        a = ini_read_real("i", "i", 0);
        repeat(a+1){
            if i != 0 _d = i-1 else _d = 0;
            if ini_section_exists(i){
                i_l[i] = ini_read_real(string(i), "l", i_l[_d]);
                i_r[i] = ini_read_real(string(i), "r", i_r[_d]);
                i_u[i] = ini_read_real(string(i), "u", i_u[_d]);
                i_d[i] = ini_read_real(string(i), "d", i_d[_d]);
                i_a[i] = ini_read_real(string(i), "a", i_a[_d]);
                i_t[i] = ini_read_real(string(i), "t", -1);
            }
            i+=1;
        }
        ini_close();
        i_l[a+1] = false;
        i_r[a+1] = false;
        i_u[a+1] = false;
        i_d[a+1] = false;
        i_a[a+1] = false;
        i_t[a+1] = -1;
        instance_create(0,0,obj_display_text);
    }else{
        demo_error = true;
        instance_deactivate_all(true);
        instance_activate_object(obj_window_control);
        background_color[0] = c_black;
        scr_message_show("DEMO ERROR!","Demo file missing!","Returning to title screen.",0,id);
        audio_play_sound(snd_menu_whoosh, 10, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_title_screen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset platform!
if demo_error exit;

if !scr_collision_platform_check_bottom(obj_walls_platform) || !ground
{
    platform_check = 0;
}  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Die Event

if action = 9{
    if hurttimer &lt;= 0{
        audio_stop_all();
        room_restart();
    }
    /*if hurttimer &lt;= 20
        audio_stop_all();*/
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Limit Speed
gsp = clamp(gsp, -18, 18);
xsp = clamp(xsp, -18, 18);
ysp = clamp(ysp, -18, 18);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables for drawing
draw_x = floor(xpos);
draw_y = floor(ypos);

switch mode{
    case 1:
        if spin draw_x = floor(xpos)+2;
        break;
    case 2:
        if !spin draw_y = floor(ypos)+1; else draw_y = floor(ypos)-3;
        break;
    case 3:
        if !spin draw_x = floor(xpos)+1; else draw_x = floor(xpos)-1;
        break;
    default:
        draw_x = floor(xpos);
        if action == 6 &amp;&amp; dir == 1 draw_x = floor(xpos)+1;
        draw_y = floor(ypos);
        break;
}

x = draw_x;
y = draw_y;


scr_p_rotation_mania();
draw_angle = clamp(draw_angle, 0, 360);

if action == 4 &amp;&amp; ground sd_subimg += 0.5;
else sd_subimg = 0;

if hurttimer != 0 &amp;&amp; action != 9 &amp;&amp; action != 8{
    image_alpha = (flash_timer &lt; 5);
    flash_timer -= 1;
    if flash_timer == 0 flash_timer = 8;
}else{
    image_alpha = 1;
    flash_timer = -1
}

//Shield drawing variables
if shield != false{
    switch shield{
        case "regular":
            sh_spr_ind = spr_sh_regular;
            sh_img_ind += 0.333333;
            break;
        case "electric":
            sh_spr_ind = spr_sh_electric;
            sh_img_ind += 0.5;
            break;
        case "fire":
            if sh_action sh_spr_ind = spr_sh_fire_dash; else sh_spr_ind = spr_sh_fire;
            sh_img_ind += 1;
            break;
        case "bubble":
            if (sh_spr_ind == spr_sh_bubble_bounce_finish &amp;&amp; sh_img_ind &gt;= sprite_get_number(sh_spr_ind)-1) || (!sh_action &amp;&amp; sh_spr_ind != spr_sh_bubble_bounce_finish &amp;&amp; sh_spr_ind != spr_sh_bubble_bounce){
                if sh_spr_ind == spr_sh_bubble_bounce_finish &amp;&amp; sh_img_ind &gt;= sprite_get_number(sh_spr_ind) {sh_img_ind = 0; sh_ov_img_ind = 0;}
                sh_spr_ind = spr_sh_bubble;
                sh_ov_spr_ind = spr_sh_bubble_overlay;
            }
            if !sh_action &amp;&amp; sh_spr_ind == spr_sh_bubble_bounce &amp;&amp; sh_img_ind &gt;= sprite_get_number(sh_spr_ind)-1{
                sh_spr_ind = spr_sh_bubble_bounce_finish;
                sh_ov_spr_ind = spr_sh_bubble_overlay;
                sh_img_ind = 0;
            }
            switch sh_spr_ind{
                case spr_sh_bubble:
                case spr_sh_bubble_bounce_finish:
                    sh_img_ind += 0.5;
                    sh_ov_spr_ind = spr_sh_bubble_overlay;
                    break;
                case spr_sh_bubble_bounce:
                    sh_img_ind = min(sh_img_ind+1, sprite_get_number(sh_spr_ind)-1);
                    sh_ov_spr_ind = spr_sh_bubble_overlay_bounce;
                    break;
            }
            if !(sh_spr_ind == spr_sh_bubble_bounce_finish &amp;&amp; sh_img_ind &lt; 12) sh_ov_img_ind += 0.5;
            break;
    }if sh_img_ind &gt;= sprite_get_number(sh_spr_ind) sh_img_ind -= sprite_get_number(sh_spr_ind)
}else sh_spr_ind = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Record Demo
/*if keyboard_check_pressed(global.key_a) || keyboard_check_pressed(global.key_l) || keyboard_check_pressed(global.key_r) || keyboard_check_pressed(global.key_u) || keyboard_check_pressed(global.key_d) || keyboard_check_released(global.key_a) || keyboard_check_released(global.key_l) || keyboard_check_released(global.key_r) || keyboard_check_released(global.key_u) || keyboard_check_released(global.key_d){
    ini_open("DEMO1");
    if keyboard_check_pressed(ord("A"))
        ini_write_real(total_inputs, "a", 1);
    if keyboard_check_pressed(vk_left)
        ini_write_real(total_inputs, "l", 1);
    if keyboard_check_pressed(vk_right)
        ini_write_real(total_inputs, "r", 1);
    if keyboard_check_pressed(vk_up)
        ini_write_real(total_inputs, "u", 1);
    if keyboard_check_pressed(vk_down)
        ini_write_real(total_inputs, "d", 1);
    if keyboard_check_released(ord("A"))
        ini_write_real(total_inputs, "a", 0);
    if keyboard_check_released(vk_left)
        ini_write_real(total_inputs, "l", 0);
    if keyboard_check_released(vk_right)
        ini_write_real(total_inputs, "r", 0);
    if keyboard_check_released(vk_up)
        ini_write_real(total_inputs, "u", 0);
    if keyboard_check_released(vk_down)
        ini_write_real(total_inputs, "d", 0);
    ini_write_real(total_inputs, "t", time);
    ini_write_real("i", "i", total_inputs);
    ini_close();
    total_inputs += 1;
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add time
time += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_set_prev_coord(6);

if global.accepted = "true"+string(id){
    global.accepted = -1;
    scr_message_exit();
    alarm[0] = 100;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute scripts

if !demo_error{
//-- Handle System Objects --//
if scr_collision_arg_any(obj_layer_1_switch){
    p_layer = 1;
}
if scr_collision_arg_any(obj_layer_2_switch){
    p_layer = 2;
}
if scr_collision_box_main(obj_tunnel_switch){
    scr_p_tunnel_switch();
}

scr_p_physics(); //This will execute the script handling the main player physics, such as slopes, movement, etc.

//-- Handle Level Objects --//
if action != 9{
//Rings
if scr_collision_box_main(par_rings){
    scr_p_handle_rings();
}

//Springs
if scr_collision_arg_any(par_springs){
    scr_p_handle_springs();
}

//-- Hazards --//
//Spikes
spike = scr_collision_spikes_check();
if spike &amp;&amp; hurttimer == 0
    scr_p_get_hurt();

//Badniks
if scr_collision_box_main(obj_badnik){
    if !spin &amp;&amp; ani_index != spindash_sprite &amp;&amp; invincible_timer == 0 scr_p_get_hurt();
    else if spin || ani_index == spindash_sprite || invincible_timer &gt; 0{
        global.Score += 100;
        if sign(ysp) = 1 &amp;&amp; !ground{
            if ysp &gt; 4 &amp;&amp; ((key_ah) || (invincible_timer &gt; 0 &amp;&amp; !(spin || ani_index == spindash_sprite))) {ysp = ysp*-1;}
            else {ysp = -4;}
        }
        if audio_is_playing(snd_explosion) audio_stop_sound(snd_explosion);
            audio_play_sound(snd_explosion, 0, false);
        with(scr_collision_box_main(obj_badnik)){
            instance_create(x, y, obj_badnik_explosion);
            instance_create(x, y, obj_100);
            instance_destroy();
        }
    }
}

//Projectiles
if scr_collision_box_main(obj_projectile){
    pr = scr_collision_box_main(obj_projectile);
    if pr.can_collide{
        if shield == false scr_p_get_hurt(); else{
            pr.can_collide = false;
            pr.hspeed *= -3;
            pr.vspeed *= -3;
        }
    }
}

//Signpost
if position_meeting(xpos, ypos, obj_goal_post) &amp;&amp; ground{
    scr_p_handle_goalpost();
}
//Starpost
starpost = instance_position(xpos, ypos, obj_star_post);
if position_meeting(xpos, ypos, obj_star_post) &amp;&amp; !global.checkpoint_activated[starpost.index]{
    scr_p_starpost_save();
    global.checkpoint_activated[starpost.index] = true;
    audio_play_sound(snd_star_post, 0, false);
    starpost.dir = sign(xsp);
    starpost.twirl = true;    
}
}

scr_p_input(); //The script executed will handle the player input, such as jumping, moving, etc.
scr_p_sprite_handle(); //Handle the sprites of the character

//Monitors
if scr_collision_box_real(par_monitors) &amp;&amp; scr_collision_monitor_check(){
    scr_p_handle_monitors();
}

scr_p_collision_sensors_update(); //Manage the coordinates of the sensors
}
else{
    audio_stop_sound(global.bgm);
    instance_deactivate_all(true);
    instance_activate_object(obj_mp_controller);
    instance_activate_object(obj_mp_option);
    instance_activate_object(obj_mp_title);
    instance_activate_object(obj_mp_text);
    instance_activate_object(obj_mp_ribbon);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Powerups
//-- Invincibility --//
if invincible_timer &gt; 0 {
    invincible_timer -= 1;
    if invincible_timer &lt;= 0{
        hurttimer = 120;
        flash_timer = 8;
        scr_hud_icon_delete("invincible");
        scr_hud_icons_sort();
    }
}
if invincible_timer == 0 &amp;&amp; instance_exists(obj_inv_sparkle) instance_destroy(obj_inv_sparkle);

//-- Super Speed Shoes --//
if super_speed_timer &gt; 0 {
    super_speed_timer -= 1;
    acc = 0.09375;
    frc = 0.09375;
    top = 12;
    air = 0.1875;
    rollfrc = 0.046875;
    if super_speed_timer &lt;= 0{
        acc = 0.046875;
        frc = 0.046875;
        top = 6;
        air = 0.09375;
        rollfrc = 0.0234375;
        scr_hud_icon_delete("speed");
        scr_hud_icons_sort();
    }else{
        if !(abs(xspd) &lt; 0.5 &amp;&amp; abs(ysp) &lt; 0.5){
            afterimage = instance_create(prevdx[1], prevdy[1], obj_afterimage);
            afterimage.obj = id;
            afterimage.image_alpha = image_alpha-0.2;
            afterimage.alarm[0] = 3;
            afterimage.sprite_index = ani_index;
            afterimage.image_index = ani_subimg;
            afterimage.image_angle = draw_angle;
            afterimage.image_xscale = dir;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Handling
if !demo_error{
ani_subimg_num = (sprite_get_number(ani_to_be_set)) - 1;

//anim_index handling
if ((ani_index != ani_to_be_set)) //on the event of an animation needing to change
{
    ani_index = ani_to_be_set; //set animation
    ani_subimg_duration_timer = ani_subimg_duration_set; //reset subimage duration counter, "ani_subimg_duration_set" would be whatever the duration should be at that moment
    ani_subimg = 0; //0 being the first subimage
}
else
{
//subimage handling
    if (ani_subimg_duration_timer &gt; 0 &amp;&amp; ani_subimg_duration_timer != -1) //Sprite won't animate if the duration is set to -1.
    {
        ani_subimg_duration_timer -= 1; //count down subimage duration
    }
    if ani_subimg_duration_timer &lt;= 0 &amp;&amp; ani_subimg_duration_timer != -1
    {
        //move to next subimage
        ani_subimg = ani_subimg+1; //next subimage
        if (ani_subimg &gt; ani_subimg_num) ani_subimg = ani_subimg_loop; //animation has ended, loop animation
    
        ani_subimg_duration_timer = ani_subimg_duration_set; //reset duration counter, "ani_subimg_duration_set" would be whatever the duration should be at that moment
    }
}

if ani_index == spin_sprite &amp;&amp; !spin {spin = true; scr_p_collision_sensors_update();}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_camera){
    obj_camera.cam_x = xpos;
    obj_camera.cam_y = ypos;
}if instance_exists(obj_hud){
    obj_hud.handle = id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Die if fall into bottomless pit
if demo_error exit;
if ypos &gt; room_height &amp;&amp; action != 9{
    hurttimer = 0;
    hurt = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if demo_error exit;
display_set_gui_size(window_get_width(), window_get_height());
draw_set_font(-1);
draw_set_halign(fa_left);
draw_set_color(c_white);
if instance_exists(obj_motorola_shader) draw_set_color(c_black);
if debug{
    draw_text(0, 0, "xpos "+string(xpos));
    draw_text(0, 16, "ypos "+string(ypos));
    draw_text(0, 16*2, "xsp "+string(xsp));
    draw_text(0, 16*3, "ysp "+string(ysp));
    draw_text(0, 16*4, "gsp "+string(gsp));
    draw_text(0, 16*5, "ground "+string(ground));
    draw_text(0, 16*6, "angle "+string(angle));
    draw_text(0, 16*7, "mode "+string(mode));
    draw_text(0, 16*8, "tile_x "+string(tile_x));
    draw_text(0, 16*9, "tile_y "+string(tile_y));
    draw_text(0, 16*15, "fps "+string(fps));
    draw_text(0, 16*16, "real fps "+string(fps_real));
    draw_text(0, 16*10, "visual_angle "+string(draw_angle));
    draw_text(0, 16*11, "action "+string(action));
    draw_text(0, 16*12, "flash "+string(flash_timer));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw everything
if demo_error exit;
draw_set_color(c_white);

//Draw Shields below character
if invincible_timer == 0 switch(shield){
    case "electric":
        draw_sprite_ext(sh_spr_ind, sh_img_ind, x, y+(2*spin)-(3*!spin), 1, 1, 0, c_white, (floor(sh_img_ind)&gt;=28));
        break;
    case "fire":
        draw_sprite_ext(sh_spr_ind, sh_img_ind, x, y+(2*spin)-(3*!spin), 1, 1, 0, c_white, (!(floor(sh_img_ind)%2==0)*(!sh_action)));
        break;
}

//Draw character
draw_sprite_ext(ani_index, ani_subimg, draw_x, draw_y, dir, 1, /*45*(round(draw_angle/45) % 8)*/ draw_angle, c_white, image_alpha);
if action == 4 &amp;&amp; ground draw_sprite_ext(spr_spindash_dust, sd_subimg, xpos, ypos, dir, 1, 0, c_white, 1);

//Draw Shields above character
if invincible_timer == 0 switch(shield){
    case "regular":
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(sh_spr_ind, sh_img_ind, x, y+(2*spin)-(3*!spin), 1, 1, 0, c_white, 0.6);
        draw_set_blend_mode(bm_normal);
        break;
    case "electric":
        draw_sprite_ext(sh_spr_ind, sh_img_ind, x, y+(2*spin)-(3*!spin), 1, 1, 0, c_white, (floor(sh_img_ind)&lt;28));
        break;
    case "fire":
        if !sh_action draw_sprite_ext(sh_spr_ind, sh_img_ind, x, y+(2*spin)-(3*!spin), 1, 1, 0, c_white, (floor(sh_img_ind)%2==0));
        else draw_sprite_ext(sh_spr_ind, sh_img_ind, x, y+(2*spin)-(3*!spin), sh_dir, 1, 0, c_white, 1);
        break;
    case "bubble":
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(sh_spr_ind, sh_img_ind, x, y+(2*spin)-(3*!spin), 1, 1, 0, c_white, 1);
        draw_set_blend_mode(bm_normal);
        if (sh_spr_ind != spr_sh_bubble_bounce_finish) || (sh_spr_ind == spr_sh_bubble_bounce_finish &amp;&amp; sh_img_ind &gt;= 12) draw_sprite_ext(sh_ov_spr_ind, sh_ov_img_ind, x, y+(2*spin)-(3*!spin), 1, 1, 0, c_white, 0.5);
        break;
}

//Draw Sensors
if debug scr_p_draw_sensors();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
