<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99990</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>option_index = 0;
allow_input = true;
global.paused = false;
unpaused = false;
if os_type == os_android{
    key_p = virtual_key_add(global.Window_X-26, 0, 26, 26, global.key_s);
    instance_create(0, 0, obj_pm_pause_icon);
}
key_pr = keyboard_check_released(global.key_s) || gamepad_button_check_released(0, gp_start);
key_ph = keyboard_check(global.key_s) || gamepad_button_check(0, gp_start);

if os_type != os_android &amp;&amp; allow_input{
        key_u = keyboard_check_pressed(global.key_u) || gamepad_button_check_pressed(0, gp_padu);
        key_d = keyboard_check_pressed(global.key_d) || gamepad_button_check_pressed(0, gp_padd);
        key_a = keyboard_check_pressed(global.key_a) || gamepad_button_check_pressed(0, gp_face1);
}
else{
        key_u = 0;
        key_d = 0;
        key_a = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input
if os_type != os_android &amp;&amp; allow_input &amp;&amp; !global.Demo{
    key_u = keyboard_check_pressed(global.key_u) || gamepad_button_check_pressed(0, gp_padu);
    key_d = keyboard_check_pressed(global.key_d) || gamepad_button_check_pressed(0, gp_padd);
    key_a = keyboard_check_pressed(global.key_a) || gamepad_button_check_pressed(0, gp_face1);
}
else{
    key_u = 0;
    key_d = 0;
    key_a = 0;
}
if global.paused{ 
    if allow_input{
        if key_u{
            option_index -= 1; audio_play_sound(snd_menu_bleep, 0, false); if option_index &lt; 0 option_index = 2;
        }
        if key_d{
            option_index += 1; audio_play_sound(snd_menu_bleep, 0, false); if option_index &gt; 2 option_index = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pausing the game
if instance_exists(obj_fade) exit;
key_ph = keyboard_check(global.key_s) || gamepad_button_check(0, gp_start);
key_pr = keyboard_check_released(global.key_s) || gamepad_button_check_released(0, gp_start);
if !global.paused &amp;&amp; key_pr &amp;&amp; allow_input{
    global.paused = true;
    allow_input = false;
    instance_destroy(obj_pm_ribbon);
    instance_destroy(obj_pm_line);
    instance_destroy(obj_pm_pause_text);
    instance_destroy(obj_pm_black_line);
    instance_destroy(obj_pm_option);
    pause_screen = -1;
    if surface_exists(application_surface){
        surface_save(application_surface, "pause.png");
        pause_screen = sprite_add("pause.png", 1, false, false, 0, 0);
    }
    audio_pause_all();
    instance_deactivate_all(true);
    instance_activate_object(obj_pm_pause_icon);
    instance_activate_object(obj_window_control);
    instance_create(0, 0, obj_pm_ribbon);
    instance_create(0, 0, obj_pm_line);
    instance_create(0, 0, obj_pm_pause_text);
    instance_create(0, 0, obj_pm_black_line);
    instance_create(0, 0, obj_pm_resume);
    instance_create(0, 0, obj_pm_restart);
    instance_create(0, 0, obj_pm_tomenu);
    audio_play_sound(snd_menu_accept, 0, false);
}
else if unpaused &amp;&amp; global.paused{
    global.paused = false;
    instance_activate_all();
    unpaused = false;
    audio_resume_all();
    allow_input = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.paused{
    draw_set_color(c_white);
    draw_set_alpha(1);
    if surface_exists(application_surface) &amp;&amp; sprite_exists(pause_screen) {draw_sprite(pause_screen, 0, view_xview[0], view_yview[0]);}
    draw_set_color(c_black);
    draw_set_alpha(0.5);
    draw_rectangle(view_xview[0], view_yview[0], view_xview[0]+global.Window_X, view_yview[0]+global.Window_Y, false);
    draw_set_color(c_white);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
