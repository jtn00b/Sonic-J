<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_op_button1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_op_option_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
index = 0;
on = false;
selected = false;
pressed = false;
alpha = 1;
flash = false;
flash_timer = 3;
text = "";
_x = 0;
_y = 0;
invalid = false;
ttext = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>flash = false;
alpha = 1;
flash_timer = 3;
obj_main_menu_controller.allow_input = true;
pressed = false;
selected = false;

switch index{
    case -1:
    case -2:
    case -3:
    case -4:
    case -5:
    case -6:
    case -7:
    case -8:
        if invalid invalid = false;
        break;
    case 0:
        window_set_fullscreen(true);
        break;
    case 1:
        window_set_fullscreen(false);
        break;
    case 2:
        obj_op_options._vsync = true;
        break;
    case 3:
        obj_op_options._vsync = false;
        break;
    case 4:
        global.show_fps = true;
        break;
    case 5:
        global.show_fps = false;
        break;
    case 6:
        global.screen_adapting = true;
        break;
    case 7:
        global.screen_adapting = false;
        break;
    case 8:
        global.hud_new = true;
        break;
    case 9:
        global.hud_new = false;
        break;
    case 10:
        global.camera_old = false;
        break;
    case 11:
        global.camera_old = true;
        break;
    case 12:
        global.motorola_shader = true;
        break;
    case 13:
        global.motorola_shader = false;
        break;
    case 999:
        obj_main_menu_controller.allow_input = false;
        if text == "BACK"{
            if obj_op_options._screen_adapting != global.screen_adapting || obj_op_options._vsync != global.vsync{
                scr_message_show("RESTART", "The game must be restarted", "to save settings", 0, string(id)+"restart");
            }else{
                global.key_u = obj_op_options._up;
                global.key_d = obj_op_options._down;
                global.key_l = obj_op_options._left;
                global.key_r = obj_op_options._right;
                global.key_a = obj_op_options._jump;
                global.key_b = obj_op_options._back;
                global.key_del = obj_op_options.__delete;
                global.key_s = obj_op_options.__start;
                scr_options_save();
                fade = instance_create(0,0,obj_fade);
                fade.trans_type = 2;
                fade.destination = global.previous_room;
                fade.fade_mode = 0;
                fade.color_red = 0;
                fade.color_green = 0;
                fade.color_blue = 0;
            }
        }else if text == "RESET"{
            obj_main_menu_controller.allow_input = true;
            global.accepted = -1;
            if obj_main_menu_controller.op_category == 2{
                if os_type == os_windows{
                    global.key_l = vk_left;
                    global.key_r = vk_right;
                    global.key_u = vk_up;
                    global.key_d = vk_down;
                    global.key_a = ord("A");
                    global.key_b = ord("S");
                    global.key_del = ord("D");
                    global.key_s = vk_enter;
                    obj_op_options._left = vk_left;
                    obj_op_options._right = vk_right;
                    obj_op_options._up = vk_up;
                    obj_op_options._down = vk_down;
                    obj_op_options._jump = ord("A");
                    obj_op_options._back = ord("S");
                    obj_op_options.__delete = ord("D");
                    obj_op_options.__start = vk_enter;
                }
                else if os_type == os_android{
                    global.joy_x = 64;
                    global.joy_y = 178;
                    global.a_x = global.Window_X-64;
                    global.a_y = 178;
                }
            }else if obj_main_menu_controller.op_category == 3{
                global.sfx_gain = 1;
                global.bgm_gain = 1;
                audio_group_set_gain(ad_bgm, global.bgm_gain, 0);
                audio_group_set_gain(audiogroup_default, global.sfx_gain, 0);
                obj_op_slider.value_scale = 1;
            }else{
                global.screen_adapting = true;
                obj_op_options._vsync = false;
                global.show_fps = (os_type = os_android);
                global.hud_new = true;
                global.camera_old = false;
                global.motorola_shader = false;
            }
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if index == 999{
    switch obj_main_menu_controller.op_category{
        case 0:
        case 1:
            _y = 4;
            break;
        case 2:
            _y = 5;
            break;
        case 3:
            _y = 3;
            break;
    }
}


if (obj_main_menu_controller.select_x == _x &amp;&amp; obj_main_menu_controller.select_y == _y &amp;&amp; os_type == os_windows) || (mouse_check_button(mb_left) &amp;&amp; position_meeting(mouse_x, mouse_y, self) &amp;&amp; os_type == os_android)
    selected = true;
else if (((obj_main_menu_controller.select_x != _x || obj_main_menu_controller.select_y != _y) &amp;&amp; os_type == os_windows) || ((!mouse_check_button(mb_left) || !position_meeting(mouse_x, mouse_y, self)) &amp;&amp; os_type == os_android)) &amp;&amp; !pressed selected = false;

if ((selected &amp;&amp; (obj_main_menu_controller.key_a || obj_main_menu_controller.key_s)) || (mouse_check_button_released(mb_left) &amp;&amp; position_meeting(mouse_x, mouse_y, self))) &amp;&amp; obj_main_menu_controller.allow_input &amp;&amp; !pressed{
    if os_type == os_windows{
        obj_main_menu_controller.select_x = _x;
        obj_main_menu_controller.select_y = _y;
    }
    selected = true;
    pressed = true;
    flash = true;
    alpha = 0;
    if index &gt;= 0 alarm[0] = 50;
    else io_clear();
    obj_main_menu_controller.allow_input = false;
    audio_play_sound(snd_menu_accept, 0, false);
}
if flash{
    flash_timer -= 1;
    if flash_timer == 0{
        if alpha == 0 alpha = 1;
        else alpha = 0;
        flash_timer = 3;
    }
    if index &lt; 0 &amp;&amp; !invalid{
        if keyboard_check_pressed(vk_anykey){
            if !(112&lt;=keyboard_key &amp;&amp; keyboard_key&lt;=123){
                switch index{
                    case -1:
                        obj_op_options._up = keyboard_key;
                        break;
                    case -2:
                        obj_op_options._down = keyboard_key;
                        break;
                    case -3:
                        obj_op_options._left = keyboard_key;
                        break;
                    case -4:
                        obj_op_options._right = keyboard_key;
                        break;
                    case -5:
                        obj_op_options._jump = keyboard_key;
                        break;
                    case -6:
                        obj_op_options._back = keyboard_key;
                        break;
                    case -7:
                        obj_op_options.__delete = keyboard_key;
                        break;
                    case -8:
                        obj_op_options.__start = keyboard_key;
                        break;
                }
                flash = false;
                pressed = false;
                alpha = 1;
                flash_timer = 3;
                obj_main_menu_controller.allow_input = true;
                audio_play_sound(snd_menu_accept, 0, false);
            }else{
                invalid = true;
                selected = true;
                pressed = true;
                alarm[0] = 50;
                flash = true;
                alpha = 0;
                ttext = scr_keycode_to_keyname(keyboard_key);
                obj_main_menu_controller.allow_input = false;
                audio_stop_sound(snd_menu_accept);
                audio_play_sound(snd_error, 0, false);
            }
        }
    }
}

switch index{
    case 0:
        on = window_get_fullscreen();
        break;
    case 1:
        on = !window_get_fullscreen();
        break;
    case 2:
        on = obj_op_options._vsync;
        break;
    case 3:
        on = !obj_op_options._vsync;
        break;
    case 6:
        on = global.screen_adapting;
        break;
    case 7:
        on = !global.screen_adapting;
        break;
    case 4:
        on = global.show_fps;
        break;
    case 5:
        on = !global.show_fps;
        break;
    case 8:
        on = global.hud_new;
        break;
    case 9:
        on = !global.hud_new;
        break;
    case 10:
        on = !global.camera_old;
        break;
    case 11:
        on = global.camera_old;
        break;
    case 12:
        on = global.motorola_shader;
        break;
    case 13:
        on = !global.motorola_shader;
        break;
    case -1:
        text = scr_keycode_to_keyname(obj_op_options._up);
        break;
    case -2:
        text = scr_keycode_to_keyname(obj_op_options._down);
        break;
    case -3:
        text = scr_keycode_to_keyname(obj_op_options._left);
        break;
    case -4:
        text = scr_keycode_to_keyname(obj_op_options._right);
        break;
    case -5:
        text = scr_keycode_to_keyname(obj_op_options._jump);
        break;
    case -6:
        text = scr_keycode_to_keyname(obj_op_options._back);
        break;
    case -7:
        text = scr_keycode_to_keyname(obj_op_options.__delete);
        break;
    case -8:
        text = scr_keycode_to_keyname(obj_op_options.__start);
        break;
}

if global.accepted == "true"+string(id)+"restart"{
    global.key_u = obj_op_options._up;
    global.key_d = obj_op_options._down;
    global.key_l = obj_op_options._left;
    global.key_r = obj_op_options._right;
    global.key_a = obj_op_options._jump;
    global.key_b = obj_op_options._back;
    global.key_del = obj_op_options.__delete;
    global.key_s = obj_op_options.__start;
    global.vsync = obj_op_options._vsync;
    scr_options_save();
    if obj_op_options._screen_adapting != global.screen_adapting{
        if global.joy_x != 64 || global.joy_y != 178 || global.a_x != global.Window_X-64 || global.a_y != 178{
            ini_open('settings.ini');
            ini_key_delete("controls", "joystick x");
            ini_key_delete("controls", "joystick y");
            ini_key_delete("controls", "button x");
            ini_key_delete("controls", "button y");
            ini_close();
        }
    }
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index, on, x, y);
draw_set_alpha(alpha);
draw_set_font(global.text_font);
if selected draw_set_font(global.text_font_gold);
if invalid draw_set_font(global.text_font_red);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
if !invalid draw_text(x, y-1, text); else draw_text(x, y-1, ttext);
draw_set_alpha(1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
